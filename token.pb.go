// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: token.proto

package pwt

import (
	bytes "bytes"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	_ "github.com/gogo/protobuf/types"
	github_com_gogo_protobuf_types "github.com/gogo/protobuf/types"
	golang_proto "github.com/golang/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Algo int32

const (
	ALGO_UNKNOWN Algo = 0
	ALGO_HS256   Algo = 10
	ALGO_HS384   Algo = 11
	ALGO_HS512   Algo = 12
)

var Algo_name = map[int32]string{
	0:  "ALGO_UNKNOWN",
	10: "ALGO_HS256",
	11: "ALGO_HS384",
	12: "ALGO_HS512",
}

var Algo_value = map[string]int32{
	"ALGO_UNKNOWN": 0,
	"ALGO_HS256":   10,
	"ALGO_HS384":   11,
	"ALGO_HS512":   12,
}

func (Algo) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_3aff0bcd502840ab, []int{0}
}

type Claims struct {
	IssuedAt  *time.Time `protobuf:"bytes,1,opt,name=issued_at,json=issuedAt,proto3,stdtime" json:"iat,omitempty"`
	ExpiresAt *time.Time `protobuf:"bytes,2,opt,name=expires_at,json=expiresAt,proto3,stdtime" json:"exp,omitempty"`
	NotBefore *time.Time `protobuf:"bytes,3,opt,name=not_before,json=notBefore,proto3,stdtime" json:"nbf,omitempty"`
	PWTID     string     `protobuf:"bytes,4,opt,name=pwt_id,json=pwtId,proto3" json:"pti,omitempty"`
	Audience  string     `protobuf:"bytes,5,opt,name=audience,proto3" json:"aud,omitempty"`
	Issuer    string     `protobuf:"bytes,6,opt,name=issuer,proto3" json:"iss,omitempty"`
	Subject   string     `protobuf:"bytes,7,opt,name=subject,proto3" json:"sub,omitempty"`
}

func (m *Claims) Reset()      { *m = Claims{} }
func (*Claims) ProtoMessage() {}
func (*Claims) Descriptor() ([]byte, []int) {
	return fileDescriptor_3aff0bcd502840ab, []int{0}
}
func (m *Claims) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Claims) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Claims.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Claims) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Claims.Merge(m, src)
}
func (m *Claims) XXX_Size() int {
	return m.Size()
}
func (m *Claims) XXX_DiscardUnknown() {
	xxx_messageInfo_Claims.DiscardUnknown(m)
}

var xxx_messageInfo_Claims proto.InternalMessageInfo

func (m *Claims) GetIssuedAt() *time.Time {
	if m != nil {
		return m.IssuedAt
	}
	return nil
}

func (m *Claims) GetExpiresAt() *time.Time {
	if m != nil {
		return m.ExpiresAt
	}
	return nil
}

func (m *Claims) GetNotBefore() *time.Time {
	if m != nil {
		return m.NotBefore
	}
	return nil
}

func (m *Claims) GetPWTID() string {
	if m != nil {
		return m.PWTID
	}
	return ""
}

func (m *Claims) GetAudience() string {
	if m != nil {
		return m.Audience
	}
	return ""
}

func (m *Claims) GetIssuer() string {
	if m != nil {
		return m.Issuer
	}
	return ""
}

func (m *Claims) GetSubject() string {
	if m != nil {
		return m.Subject
	}
	return ""
}

func (*Claims) XXX_MessageName() string {
	return "bloxite.pwt.Claims"
}

type Token struct {
	Claims Claims `protobuf:"bytes,1,opt,name=claims,proto3" json:"claims"`
	Algo   Algo   `protobuf:"varint,2,opt,name=algo,proto3,enum=bloxite.pwt.Algo" json:"alg"`
	Extra  []byte `protobuf:"bytes,3,opt,name=extra,proto3" json:"extra,omitempty"`
}

func (m *Token) Reset()      { *m = Token{} }
func (*Token) ProtoMessage() {}
func (*Token) Descriptor() ([]byte, []int) {
	return fileDescriptor_3aff0bcd502840ab, []int{1}
}
func (m *Token) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Token) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Token.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Token) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Token.Merge(m, src)
}
func (m *Token) XXX_Size() int {
	return m.Size()
}
func (m *Token) XXX_DiscardUnknown() {
	xxx_messageInfo_Token.DiscardUnknown(m)
}

var xxx_messageInfo_Token proto.InternalMessageInfo

func (m *Token) GetClaims() Claims {
	if m != nil {
		return m.Claims
	}
	return Claims{}
}

func (m *Token) GetAlgo() Algo {
	if m != nil {
		return m.Algo
	}
	return ALGO_UNKNOWN
}

func (m *Token) GetExtra() []byte {
	if m != nil {
		return m.Extra
	}
	return nil
}

func (*Token) XXX_MessageName() string {
	return "bloxite.pwt.Token"
}
func init() {
	proto.RegisterEnum("bloxite.pwt.Algo", Algo_name, Algo_value)
	golang_proto.RegisterEnum("bloxite.pwt.Algo", Algo_name, Algo_value)
	proto.RegisterType((*Claims)(nil), "bloxite.pwt.Claims")
	golang_proto.RegisterType((*Claims)(nil), "bloxite.pwt.Claims")
	proto.RegisterType((*Token)(nil), "bloxite.pwt.Token")
	golang_proto.RegisterType((*Token)(nil), "bloxite.pwt.Token")
}

func init() { proto.RegisterFile("token.proto", fileDescriptor_3aff0bcd502840ab) }
func init() { golang_proto.RegisterFile("token.proto", fileDescriptor_3aff0bcd502840ab) }

var fileDescriptor_3aff0bcd502840ab = []byte{
	// 519 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x92, 0x3d, 0x6f, 0xd3, 0x40,
	0x18, 0xc7, 0x7d, 0xe4, 0xad, 0xb9, 0x84, 0x2a, 0x3d, 0x40, 0xb2, 0x32, 0x9c, 0xab, 0x4e, 0xe5,
	0xa5, 0xae, 0x9a, 0x52, 0xc4, 0x1a, 0x83, 0x04, 0x15, 0x28, 0xad, 0x42, 0x50, 0x25, 0x96, 0xc8,
	0x4e, 0x2e, 0xe6, 0xc0, 0xce, 0x9d, 0xe2, 0xc7, 0x4a, 0xd8, 0xfa, 0x11, 0xfa, 0x21, 0x18, 0x18,
	0x99, 0x98, 0x19, 0x33, 0x66, 0xec, 0x14, 0x88, 0xbd, 0xa0, 0x4e, 0xfd, 0x08, 0xc8, 0xe7, 0x84,
	0x98, 0x4e, 0xdd, 0xfc, 0xb7, 0x7e, 0xff, 0x9f, 0x74, 0xcf, 0xf3, 0xe0, 0x0a, 0x88, 0xcf, 0x6c,
	0x68, 0xca, 0x91, 0x00, 0x41, 0x2a, 0x8e, 0x27, 0x26, 0x1c, 0x98, 0x29, 0xc7, 0x50, 0xdf, 0x73,
	0x39, 0x7c, 0x0c, 0x1d, 0xb3, 0x27, 0xfc, 0x7d, 0x57, 0xb8, 0x62, 0x5f, 0x31, 0x4e, 0x38, 0x50,
	0x49, 0x05, 0xf5, 0x95, 0x76, 0xeb, 0x86, 0x2b, 0x84, 0xeb, 0xb1, 0x35, 0x05, 0xdc, 0x67, 0x01,
	0xd8, 0xbe, 0x4c, 0x81, 0x9d, 0x1f, 0x39, 0x5c, 0x7c, 0xe1, 0xd9, 0xdc, 0x0f, 0x48, 0x0b, 0x97,
	0x79, 0x10, 0x84, 0xac, 0xdf, 0xb5, 0x41, 0x47, 0xdb, 0x68, 0xb7, 0xd2, 0xa8, 0x9b, 0x69, 0xdf,
	0x5c, 0xf5, 0xcd, 0xce, 0xaa, 0x6f, 0x3d, 0xb8, 0x9a, 0x1b, 0x77, 0xb9, 0x0d, 0x4f, 0x84, 0xcf,
	0x81, 0xf9, 0x12, 0xbe, 0x5c, 0xfc, 0x32, 0x50, 0x7b, 0x23, 0x75, 0x34, 0x81, 0x9c, 0x62, 0xcc,
	0x26, 0x92, 0x8f, 0x58, 0x90, 0x08, 0xef, 0xdc, 0x4e, 0xc8, 0x26, 0xf2, 0x86, 0xb0, 0xbc, 0x94,
	0xa4, 0xc6, 0xa1, 0x80, 0xae, 0xc3, 0x06, 0x62, 0xc4, 0xf4, 0xdc, 0xed, 0x8c, 0x43, 0x67, 0x70,
	0xd3, 0x38, 0x14, 0x60, 0x29, 0x07, 0x39, 0xc0, 0x45, 0x39, 0x86, 0x2e, 0xef, 0xeb, 0xf9, 0x6d,
	0xb4, 0x5b, 0xb6, 0xea, 0xd1, 0xdc, 0x28, 0x9c, 0x9e, 0x75, 0x8e, 0x5f, 0x26, 0x55, 0x09, 0x7c,
	0x5d, 0x6d, 0x17, 0xe4, 0x18, 0x8e, 0xfb, 0x64, 0x0f, 0x6f, 0xd8, 0x61, 0x9f, 0xb3, 0x61, 0x8f,
	0xe9, 0x05, 0x55, 0xda, 0x4a, 0x58, 0x3b, 0xec, 0x67, 0xd8, 0x7f, 0x08, 0x79, 0x88, 0x8b, 0x6a,
	0x22, 0x23, 0xbd, 0xb8, 0x86, 0x79, 0x10, 0x64, 0xe0, 0x25, 0x40, 0x1e, 0xe3, 0x52, 0x10, 0x3a,
	0x9f, 0x58, 0x0f, 0xf4, 0xd2, 0x9a, 0x0d, 0x42, 0x27, 0xc3, 0xae, 0x88, 0x9d, 0x73, 0x84, 0x0b,
	0x9d, 0xe4, 0x4a, 0x92, 0x37, 0xf4, 0xd4, 0x06, 0x97, 0x4b, 0xbb, 0x67, 0x66, 0x0e, 0xc6, 0x4c,
	0x97, 0x6b, 0xe5, 0xa7, 0x73, 0x43, 0x6b, 0x2f, 0x41, 0x62, 0xe2, 0xbc, 0xed, 0xb9, 0x42, 0x2d,
	0x65, 0xb3, 0xb1, 0xf5, 0x5f, 0xa1, 0xe9, 0xb9, 0xc2, 0x2a, 0x5d, 0xcd, 0x8d, 0x9c, 0xed, 0xb9,
	0x6d, 0xc5, 0x91, 0xfb, 0xb8, 0xc0, 0x26, 0x30, 0xb2, 0xd5, 0xcc, 0xab, 0xed, 0x34, 0x3c, 0x6a,
	0xe1, 0x7c, 0x02, 0x93, 0x1a, 0xae, 0x36, 0xdf, 0xbe, 0x3a, 0xe9, 0xbe, 0x6f, 0xbd, 0x69, 0x9d,
	0x9c, 0xb5, 0x6a, 0x1a, 0xd9, 0xc4, 0x58, 0xfd, 0x79, 0xfd, 0xae, 0x71, 0xf4, 0xac, 0x86, 0x33,
	0xf9, 0xf0, 0xf9, 0xd3, 0x5a, 0x25, 0x93, 0x8f, 0x0e, 0x1a, 0xb5, 0x6a, 0x3d, 0xff, 0xfd, 0x2b,
	0xd5, 0xac, 0xe6, 0x6c, 0x41, 0xb5, 0xcb, 0x05, 0xd5, 0xae, 0x17, 0x14, 0x9d, 0x47, 0x14, 0x7d,
	0x8b, 0x28, 0x9a, 0x46, 0x14, 0xcd, 0x22, 0x8a, 0x7e, 0x47, 0x14, 0xfd, 0x89, 0xa8, 0x76, 0x1d,
	0x51, 0x74, 0x11, 0x53, 0xed, 0x67, 0x4c, 0xd1, 0x34, 0xa6, 0x68, 0x16, 0x53, 0xed, 0x32, 0xa6,
	0xda, 0x87, 0x9c, 0x1c, 0x83, 0x53, 0x54, 0x57, 0x70, 0xf8, 0x37, 0x00, 0x00, 0xff, 0xff, 0x8c,
	0xd3, 0xb8, 0x05, 0x41, 0x03, 0x00, 0x00,
}

func (this *Claims) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Claims)
	if !ok {
		that2, ok := that.(Claims)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.IssuedAt == nil {
		if this.IssuedAt != nil {
			return false
		}
	} else if !this.IssuedAt.Equal(*that1.IssuedAt) {
		return false
	}
	if that1.ExpiresAt == nil {
		if this.ExpiresAt != nil {
			return false
		}
	} else if !this.ExpiresAt.Equal(*that1.ExpiresAt) {
		return false
	}
	if that1.NotBefore == nil {
		if this.NotBefore != nil {
			return false
		}
	} else if !this.NotBefore.Equal(*that1.NotBefore) {
		return false
	}
	if this.PWTID != that1.PWTID {
		return false
	}
	if this.Audience != that1.Audience {
		return false
	}
	if this.Issuer != that1.Issuer {
		return false
	}
	if this.Subject != that1.Subject {
		return false
	}
	return true
}
func (this *Token) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Token)
	if !ok {
		that2, ok := that.(Token)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Claims.Equal(&that1.Claims) {
		return false
	}
	if this.Algo != that1.Algo {
		return false
	}
	if !bytes.Equal(this.Extra, that1.Extra) {
		return false
	}
	return true
}
func (this *Claims) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 11)
	s = append(s, "&pwt.Claims{")
	s = append(s, "IssuedAt: "+fmt.Sprintf("%#v", this.IssuedAt)+",\n")
	s = append(s, "ExpiresAt: "+fmt.Sprintf("%#v", this.ExpiresAt)+",\n")
	s = append(s, "NotBefore: "+fmt.Sprintf("%#v", this.NotBefore)+",\n")
	s = append(s, "PWTID: "+fmt.Sprintf("%#v", this.PWTID)+",\n")
	s = append(s, "Audience: "+fmt.Sprintf("%#v", this.Audience)+",\n")
	s = append(s, "Issuer: "+fmt.Sprintf("%#v", this.Issuer)+",\n")
	s = append(s, "Subject: "+fmt.Sprintf("%#v", this.Subject)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Token) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&pwt.Token{")
	s = append(s, "Claims: "+strings.Replace(this.Claims.GoString(), `&`, ``, 1)+",\n")
	s = append(s, "Algo: "+fmt.Sprintf("%#v", this.Algo)+",\n")
	s = append(s, "Extra: "+fmt.Sprintf("%#v", this.Extra)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringToken(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *Claims) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Claims) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Claims) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Subject) > 0 {
		i -= len(m.Subject)
		copy(dAtA[i:], m.Subject)
		i = encodeVarintToken(dAtA, i, uint64(len(m.Subject)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Issuer) > 0 {
		i -= len(m.Issuer)
		copy(dAtA[i:], m.Issuer)
		i = encodeVarintToken(dAtA, i, uint64(len(m.Issuer)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Audience) > 0 {
		i -= len(m.Audience)
		copy(dAtA[i:], m.Audience)
		i = encodeVarintToken(dAtA, i, uint64(len(m.Audience)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.PWTID) > 0 {
		i -= len(m.PWTID)
		copy(dAtA[i:], m.PWTID)
		i = encodeVarintToken(dAtA, i, uint64(len(m.PWTID)))
		i--
		dAtA[i] = 0x22
	}
	if m.NotBefore != nil {
		n1, err1 := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.NotBefore, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(*m.NotBefore):])
		if err1 != nil {
			return 0, err1
		}
		i -= n1
		i = encodeVarintToken(dAtA, i, uint64(n1))
		i--
		dAtA[i] = 0x1a
	}
	if m.ExpiresAt != nil {
		n2, err2 := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.ExpiresAt, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(*m.ExpiresAt):])
		if err2 != nil {
			return 0, err2
		}
		i -= n2
		i = encodeVarintToken(dAtA, i, uint64(n2))
		i--
		dAtA[i] = 0x12
	}
	if m.IssuedAt != nil {
		n3, err3 := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.IssuedAt, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(*m.IssuedAt):])
		if err3 != nil {
			return 0, err3
		}
		i -= n3
		i = encodeVarintToken(dAtA, i, uint64(n3))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Token) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Token) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Token) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Extra) > 0 {
		i -= len(m.Extra)
		copy(dAtA[i:], m.Extra)
		i = encodeVarintToken(dAtA, i, uint64(len(m.Extra)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Algo != 0 {
		i = encodeVarintToken(dAtA, i, uint64(m.Algo))
		i--
		dAtA[i] = 0x10
	}
	{
		size, err := m.Claims.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintToken(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintToken(dAtA []byte, offset int, v uint64) int {
	offset -= sovToken(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Claims) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.IssuedAt != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.IssuedAt)
		n += 1 + l + sovToken(uint64(l))
	}
	if m.ExpiresAt != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.ExpiresAt)
		n += 1 + l + sovToken(uint64(l))
	}
	if m.NotBefore != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.NotBefore)
		n += 1 + l + sovToken(uint64(l))
	}
	l = len(m.PWTID)
	if l > 0 {
		n += 1 + l + sovToken(uint64(l))
	}
	l = len(m.Audience)
	if l > 0 {
		n += 1 + l + sovToken(uint64(l))
	}
	l = len(m.Issuer)
	if l > 0 {
		n += 1 + l + sovToken(uint64(l))
	}
	l = len(m.Subject)
	if l > 0 {
		n += 1 + l + sovToken(uint64(l))
	}
	return n
}

func (m *Token) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Claims.Size()
	n += 1 + l + sovToken(uint64(l))
	if m.Algo != 0 {
		n += 1 + sovToken(uint64(m.Algo))
	}
	l = len(m.Extra)
	if l > 0 {
		n += 1 + l + sovToken(uint64(l))
	}
	return n
}

func sovToken(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozToken(x uint64) (n int) {
	return sovToken(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *Claims) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Claims{`,
		`IssuedAt:` + strings.Replace(fmt.Sprintf("%v", this.IssuedAt), "Timestamp", "types.Timestamp", 1) + `,`,
		`ExpiresAt:` + strings.Replace(fmt.Sprintf("%v", this.ExpiresAt), "Timestamp", "types.Timestamp", 1) + `,`,
		`NotBefore:` + strings.Replace(fmt.Sprintf("%v", this.NotBefore), "Timestamp", "types.Timestamp", 1) + `,`,
		`PWTID:` + fmt.Sprintf("%v", this.PWTID) + `,`,
		`Audience:` + fmt.Sprintf("%v", this.Audience) + `,`,
		`Issuer:` + fmt.Sprintf("%v", this.Issuer) + `,`,
		`Subject:` + fmt.Sprintf("%v", this.Subject) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Token) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Token{`,
		`Claims:` + strings.Replace(strings.Replace(this.Claims.String(), "Claims", "Claims", 1), `&`, ``, 1) + `,`,
		`Algo:` + fmt.Sprintf("%v", this.Algo) + `,`,
		`Extra:` + fmt.Sprintf("%v", this.Extra) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringToken(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *Claims) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowToken
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Claims: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Claims: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IssuedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowToken
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthToken
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthToken
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.IssuedAt == nil {
				m.IssuedAt = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.IssuedAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpiresAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowToken
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthToken
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthToken
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ExpiresAt == nil {
				m.ExpiresAt = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.ExpiresAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NotBefore", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowToken
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthToken
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthToken
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.NotBefore == nil {
				m.NotBefore = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.NotBefore, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PWTID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowToken
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthToken
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthToken
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PWTID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Audience", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowToken
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthToken
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthToken
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Audience = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Issuer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowToken
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthToken
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthToken
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Issuer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Subject", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowToken
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthToken
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthToken
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Subject = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipToken(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthToken
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthToken
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Token) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowToken
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Token: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Token: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Claims", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowToken
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthToken
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthToken
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Claims.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Algo", wireType)
			}
			m.Algo = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowToken
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Algo |= Algo(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Extra", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowToken
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthToken
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthToken
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Extra = append(m.Extra[:0], dAtA[iNdEx:postIndex]...)
			if m.Extra == nil {
				m.Extra = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipToken(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthToken
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthToken
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipToken(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowToken
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowToken
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowToken
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthToken
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupToken
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthToken
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthToken        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowToken          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupToken = fmt.Errorf("proto: unexpected end of group")
)
